#!/bin/bash

. $WM_PROJECT_DIR/bin/tools/RunFunctions

# Simulation type with (1) or without (2) waves
reply="$(grep "choice" setup | sed 's/;//' | tr -s " " | cut -d" " -f2)"
endTime=$(foamDictionary -value -entry endTime system/controlDict)
directory="./processor0/"

# Turbine simulating (IFREMER_gen2, SuperGen_Xmed, FullScale_Xmed)
turbine="$(grep "TurName" setup | sed 's/;//' | tr -s " " | cut -d" " -f2)"

# Check to see if any solvinf already done
if [ -d "$directory" ]; then
  latestTime=$(foamListTimes -latestTime -processor)
  echo "Attempting to restart solver from time $latestTime ..."
  mv log.olaFlow_current log.olaFlow_current_old_$latestTime
  runParallel olaFlow_current
else

  # Set initial conditions
  echo Preparing 0 folder...
  cp -r 0.org 0

  # Make choice changes
  echo Making case adjustments...
  if [ $reply == "1" ];
  then
      cp constant/waveDict_wave constant/waveDict
  elif [ $reply == "2" ];
  then
      cp constant/waveDict_curr constant/waveDict
  fi

  if [ $turbine == "SuperGen_Xmed" ]
  then
    cp system/elementData_SuperGen_Xmed system/elementData
  elif [ $turbine == "IFREMER_gen2" ]
  then
    cp system/elementData_IFREMER_gen2 system/elementData
  elif [ $turbine == "FullScale_Xmed" ]
  then
    cp system/elementData_FullScale_Xmed system/elementData
  else
    echo Did not recognise turbine name cancelling operation...
    exit
  fi

  # Meshing
  runApplication blockMesh
  runApplication decomposePar
  runParallel snappyHexMesh -overwrite
  runApplication reconstructParMesh -constant
  mv log.decomposePar log.decomposeParMesh
  rm -fr pro*
  runApplication checkMesh

  #Running
  runApplication topoSet
  runApplication setFields
  runApplication setExprFields
  runApplication decomposePar
  runParallel olaFlow_current
fi

# Check if simulation finished and clear up directory
if [ -d "$directory$endTime" ]; then
  touch olaFlowTurbine.foam
  mkdir logs
  mv log.* logs
  python makeVTPseries.py
  python postProcess.py
  echo Simulation complete.
fi
