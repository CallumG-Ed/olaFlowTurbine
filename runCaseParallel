#!/bin/bash

# Choice
echo Select a choice:
echo  "(1) Waves and forward current"
echo  "(2) Waves and backward current"
echo  "(3) Forward current only"
echo  "(4) Backward current only"
read -p " " -n 1 -r reply
echo ' '

if ! [[ $reply =~ ^[1234]$ ]]
then
    echo Invalid choice
    exit
fi

echo Preparing 0 folder...
cp -r 0.org 0

# Make choice changes
echo Making case adjustments...
if [ $reply == "1" ];
then
    cp 0/U_forw 0/U
    cp system/setFieldsDict_forw system/setFieldsDict
    cp constant/waveDict_wave_forw constant/waveDict
elif [ $reply == "2" ];
then
    cp 0/U_back 0/U
    cp system/setFieldsDict_back system/setFieldsDict
    cp constant/waveDict_wave_back constant/waveDict
elif [ $reply == "3" ];
then
    cp 0/U_forw 0/U
    cp system/setFieldsDict_forw system/setFieldsDict
    cp constant/waveDict_curr_forw constant/waveDict
elif [ $reply == "4" ];
then
    cp 0/U_back 0/U
    cp system/setFieldsDict_back system/setFieldsDict
    cp constant/waveDict_curr_back constant/waveDict
fi

echo blockMesh meshing...
blockMesh > blockMesh.log

echo snappyHexMesh meshing...
runApplication snappyHexMesh -overwrite

echo topoSet...
runApplication topoSet

echo Setting the fields...
setFields > setFields.log

echo Decomposing ...
decomposePar > decomposePar.log

echo Running...
nProc=$(sed -ne 's/^numberOfSubdomains *\(.*\);/\1/p' system/decomposeParDict)
mpirun -np $nProc olaDyMFlow -parallel > olaDyMFlowTurbine.log

echo Reconstructing ...
cd processor0
latestTime="$(ls | grep '^[0-9]\+' | sort -n | tail -n1)"
cd ..
for i in $(seq 0 1 $latestTime); do
  reconstructPar -time $i >> reconstructPar.log;
done

touch currentWavemakerFlume_3D.foam

echo Simulation complete.
