/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.3                                   |
|   \\  /    A nd           | Web:      http://www.openfoam.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version         2.0;
    format          ascii;
    location        "system";
    class           dictionary;
    object          controlDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "../setup"

application     olaFlow;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         $simEnd;

deltaT          $dT;

writeControl    adjustableRunTime;

writeInterval   0.05;

purgeWrite      2;

writeFormat     ascii;

writePrecision  12;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable no;

adjustTimeStep  no;

maxCo           0.5;
maxAlphaCo	    0.5;
maxDeltaT       0.025;

libs
(
    "libturbinesFoam.so"
    "libOpenFOAM.so"
    "libsampling.so"
);

DebugSwitches
{
    axialFlowTurbineALSource 0;  // Any value greater than 0 activates
    actuatorLineSource  0;
    actuatorLineElement 0;
    LeishmanBeddoes 0;
}

functions
{
    Gauge1
    {
        type sets;
        writeControl timeStep;
        outputInterval 1;
        interpolationScheme cellPoint;
        setFormat raw;

        sets
        (
            data
            {
                type uniform;
                axis z;
                start (2.5 $Hub_y 0);
                end   (2.5 $Hub_y $z);
                nPoints #calc "$z/0.001";
            }
        );

    fields (alpha.water U);
    }
    Gauge2
    {
        type sets;
        writeControl timeStep;
        outputInterval 1;
        interpolationScheme cellPoint;
        setFormat raw;

        sets
        (
            data
            {
                type uniform;
                axis z;
                start (4 $Hub_y 0);
                end   (4 $Hub_y $z);
                nPoints #calc "$z/0.001";
            }
        );

    fields (alpha.water U);
    }
    Gauge3
    {
        type sets;
        writeControl timeStep;
        outputInterval 1;
        interpolationScheme cellPoint;
        setFormat raw;

        sets
        (
            data
            {
                type uniform;
                axis z;
                start (4.5 $Hub_y 0);
                end   (4.5 $Hub_y $z);
                nPoints #calc "$z/0.001";
            }
        );

    fields (alpha.water U);
    }
    Gauge4
    {
        type sets;
        writeControl timeStep;
        outputInterval 1;
        interpolationScheme cellPoint;
        setFormat raw;

        sets
        (
            data
            {
                type uniform;
                axis z;
                start (5 $Hub_y 1.5);
                end   (5 $Hub_y $z);
                nPoints #calc "($z-1.5)/0.001";
            }
        );

    fields (alpha.water U);
    }
    Gauge5
    {
        type sets;
        writeControl timeStep;
        outputInterval 1;
        interpolationScheme cellPoint;
        setFormat raw;

        sets
        (
            data
            {
                type uniform;
                axis z;
                start (5.5 $Hub_y 0);
                end   (5.5 $Hub_y $z);
                nPoints #calc "$z/0.001";
            }
        );

    fields (alpha.water U);
    }
    Gauge6
    {
        type sets;
        writeControl timeStep;
        outputInterval 1;
        interpolationScheme cellPoint;
        setFormat raw;

        sets
        (
            data
            {
                type uniform;
                axis z;
                start (6 $Hub_y 0);
                end   (6 $Hub_y $z);
                nPoints #calc "$z/0.001";
            }
        );

    fields (alpha.water U);
    }
    Gauge7
    {
        type sets;
        writeControl timeStep;
        outputInterval 1;
        interpolationScheme cellPoint;
        setFormat raw;

        sets
        (
            data
            {
                type uniform;
                axis z;
                start (7.5 $Hub_y 0);
                end   (7.5 $Hub_y $z);
                nPoints #calc "$z/0.001";
            }
        );

    fields (alpha.water U);
    }
    cuttingPlanes
    {
        type              surfaces;
        outputControl     timeStep;
        outputInterval     10;
        surfaceFormat    vtk;
        fields   (U alpha.water force.turbine);
        interpolationScheme          cellPoint;
        surfaces
            (
                yplane
                {
                type cuttingPlane;
                planeType pointAndNormal;
                pointAndNormalDict
                {
                    point (0 #calc "$y/2" 0);
                    normal (0 -1 0);
                }
                interpolate true;
                }
                xplane
                {
                type cuttingPlane;
                planeType pointAndNormal;
                pointAndNormalDict
                {
                    point ($Hub_x 0 0);
                    normal (1 0 0);
                }
                interpolate true;
                }
            );
    }
}
// ************************************************************************* //
